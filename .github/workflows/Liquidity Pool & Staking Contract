// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract LiquidityPoolStaking is Ownable, ReentrancyGuard {
    IERC20 public dlsToken;
    
    struct Stake {
        uint256 amount;
        uint256 startTime;
        bool active;
    }

    mapping(address => Stake) public stakes;
    mapping(address => uint256) public rewards;
    
    uint256 public totalStaked;
    uint256 public rewardRate; // Rewards per second

    event Staked(address indexed user, uint256 amount);
    event Unstaked(address indexed user, uint256 amount);
    event RewardClaimed(address indexed user, uint256 amount);
    event RewardRateUpdated(uint256 newRate);

    constructor(address _dlsToken, uint256 _rewardRate) {
        require(_dlsToken != address(0), "Invalid token address");
        dlsToken = IERC20(_dlsToken);
        rewardRate = _rewardRate;
    }

    /// @notice Allows users to stake DLS tokens
    /// @param amount The amount of tokens to stake
    function stake(uint256 amount) external nonReentrant {
        require(amount > 0, "Stake amount must be greater than zero");
        require(dlsToken.transferFrom(msg.sender, address(this), amount), "Token transfer failed");

        if (stakes[msg.sender].active) {
            rewards[msg.sender] += _calculateRewards(msg.sender);
        } else {
            stakes[msg.sender] = Stake(amount, block.timestamp, true);
        }

        stakes[msg.sender].amount += amount;
        stakes[msg.sender].startTime = block.timestamp;
        totalStaked += amount;

        emit Staked(msg.sender, amount);
    }

    /// @notice Allows users to unstake their tokens
    function unstake() external nonReentrant {
        require(stakes[msg.sender].active, "No active stake found");

        uint256 stakedAmount = stakes[msg.sender].amount;
        uint256 reward = _calculateRewards(msg.sender);

        totalStaked -= stakedAmount;
        stakes[msg.sender].active = false;
        rewards[msg.sender] += reward;

        require(dlsToken.transfer(msg.sender, stakedAmount), "Unstaking failed");

        emit Unstaked(msg.sender, stakedAmount);
    }

    /// @notice Claims accumulated rewards
    function claimRewards() external nonReentrant {
        uint256 reward = _calculateRewards(msg.sender) + rewards[msg.sender];
        require(reward > 0, "No rewards available");
        require(dlsToken.balanceOf(address(this)) >= reward, "Insufficient contract balance");

        rewards[msg.sender] = 0;
        stakes[msg.sender].startTime = block.timestamp;

        require(dlsToken.transfer(msg.sender, reward), "Reward transfer failed");

        emit RewardClaimed(msg.sender, reward);
    }

    /// @notice Updates the reward rate (admin only)
    /// @param newRate New reward rate per second
    function updateRewardRate(uint256 newRate) external onlyOwner {
        rewardRate = newRate;
        emit RewardRateUpdated(newRate);
    }

    /// @notice Calculates rewards for a user
    /// @param user The address of the staker
    function _calculateRewards(address user) internal view returns (uint256) {
        if (!stakes[user].active) return 0;
        uint256 timeElapsed = block.timestamp - stakes[user].startTime;
        return (stakes[user].amount * rewardRate * timeElapsed) / 1e18;
    }

    /// @notice Withdraws excess tokens from the contract (admin only)
    /// @param amount Amount to withdraw
    function withdrawTokens(uint256 amount) external onlyOwner {
        require(dlsToken.balanceOf(address(this)) >= amount, "Insufficient contract balance");
        require(dlsToken.transfer(owner(), amount), "Withdrawal failed");
    }
}
