// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract LoyaltyRewards is Ownable {
    IERC20 public dlsToken;
    
    mapping(address => uint256) public rewardsBalance;
    
    event RewardIssued(address indexed user, uint256 amount);
    event RewardRedeemed(address indexed user, uint256 amount);
    
    constructor(address _dlsToken) {
        require(_dlsToken != address(0), "Invalid token address");
        dlsToken = IERC20(_dlsToken);
    }

    /// @notice Issues loyalty rewards to a user
    /// @param user The address receiving the reward
    /// @param amount Amount of DLS tokens to reward
    function issueReward(address user, uint256 amount) external onlyOwner {
        require(amount > 0, "Reward amount must be greater than zero");
        rewardsBalance[user] += amount;
        
        emit RewardIssued(user, amount);
    }

    /// @notice Allows users to redeem their rewards for DLS tokens
    /// @param amount Amount of DLS tokens to redeem
    function redeemReward(uint256 amount) external {
        require(rewardsBalance[msg.sender] >= amount, "Insufficient rewards balance");
        require(dlsToken.balanceOf(address(this)) >= amount, "Insufficient contract balance");

        rewardsBalance[msg.sender] -= amount;
        require(dlsToken.transfer(msg.sender, amount), "Token transfer failed");

        emit RewardRedeemed(msg.sender, amount);
    }

    /// @notice Withdraws DLS tokens from the contract (admin only)
    /// @param amount Amount of tokens to withdraw
    function withdrawTokens(uint256 amount) external onlyOwner {
        require(dlsToken.balanceOf(address(this)) >= amount, "Insufficient contract balance");
        require(dlsToken.transfer(owner(), amount), "Withdrawal failed");
    }
}
